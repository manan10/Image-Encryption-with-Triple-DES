package encrypt;
import java.util.*;

public class encryption
{
	public static int[] ip(String p)		//initial permutation
	{
		int i,a;
		int pt[]=new int[64];
		int ip[]=new int[]{58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
		
		for(i=0;i<p.length();i++)					//64-bit key in array from string		
		{														
			pt[i] = Character.getNumericValue(p.charAt(i));		
		}			
				
		for(i=0;i<64;i++)
		{
			a = ip[i];							// Initial Permutation
			ip[i] = pt[a-1];
		}	
		return ip;
	}
	
	public static int[] xor(int[] ep,int[] k,int n)
	{
		int i;
		for(i=0;i<n;i++)				//X-OR
		{
			if(k[i]==ep[i])
			{
				ep[i]=0;
			}
			else
			{
				ep[i]=1;
			}
		}
		return ep;
	}
	
	public static int[] fk(int[] pt,int[] key)		//fk function
	{
		int a,i;
		int r1[] = new int[32];
		for(i=0;i<32;i++)
			r1[i] = pt[i+32];
		int ep[] = new int[]{32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
		System.out.println("\nkey0");
		for(i=0;i<48;i++)
				System.out.print(key[i]);
					
		for(i=0;i<48;i++)
		{
			a = ep[i];							// expansion from 32 to 48
			ep[i] = r1[a-1];
		}
		ep = xor(ep,key,48);					//xor before s box
		System.out.println("\nafter xor EP:");
		for(i=0;i<48;i++)
				System.out.print(ep[i]);
		
		return ep;	
	}
	public static void encrypt(int[][] key,int[] pt)
	{
		int i;
		int r1[] = new int[32];					//for returning rightmost bits after fk
		r1=fk(pt,key[0]);						//call to fk
		
	}
}

